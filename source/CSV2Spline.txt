(InstanceState state, String csvFile, String csvSeparator, Single width, Int32 column, Single heightMultiply, Int32 CenMinFir) => 
  {
    IArray[IArray[String]] _0ReadCSVData;// 1:ReadCSVData 117748
    Single _1FloatZero;// 7:FloatZero 117765
    Int32 _2Zero;// 51:Zero 117785
    IArray[String] _3At;// 49:At 117784
    Int32 _4Constant;// 0:Constant 117778
    Boolean _5Equal;// 48:Equal 117776
    Int32 _6Constant;// 0:Constant 117789
    Single _7FloatZero;// 29:FloatZero 117832
    IArray[Single] _8Map;// 21:Map 117825
    IArray[Int32] _9Indices;// 2:IndexOfMinimum->1:Indices 117805
    Int32 _10Zero;// 2:IndexOfMinimum->3:Zero 117806
    Int32 _11Aggregate;// 2:IndexOfMinimum->2:Aggregate 117804
    IArray[Int32] _12Unit;// 4:Array2->2:Unit 117802
    IArray[Int32] _13Indices;// 3:IndexOfMaximum->1:Indices 117816
    Int32 _14Zero;// 3:IndexOfMaximum->3:Zero 117817
    Int32 _15Aggregate;// 3:IndexOfMaximum->2:Aggregate 117815
    IArray[Int32] _16Append;// 4:Array2->3:Append 117801
    IArray[Single] _17Map;// 2:SelectByIndex->2:Map 117796
    Int32 _18Zero;// 33:First->2:Zero 117792
    Single _19At;// 33:First->0:At 117791
    Single _20Constant;// 0:Constant 117839
    IArray[Vector3] _21Map;// 6:Map 117747
    Boolean _22False;// 0:False 117840
    Spline _23CreateSplineFromKnots;// 4:CreateSplineFromKnots 117746
    _0ReadCSVData = ReadCSVData(csvFile, csvSeparator);
    _1FloatZero = FloatZero();
    _2Zero = Zero();
    _3At = At(_0ReadCSVData, _2Zero);
    _4Constant = 3;
    _5Equal = Equal(CenMinFir, _4Constant);
    _6Constant = 2;
    _7FloatZero = FloatZero();
    _8Map = Map(_0ReadCSVData, (IArray[String] x0) => 
      {
        IArray[Single] _0Map;// 22:ParseStringArrayToFloat->4:Map 117829
        Single _1At;// 42:At 117826
        _0Map = Map(x0, (String x0) => 
          {
            Single _0TryParseFloat;// 22:ParseStringArrayToFloat->2:TryParseFloat 117830
            _0TryParseFloat = TryParseFloat(x0, _7FloatZero);
            _0TryParseFloat;
            });
        _1At = At(_0Map, column);
        _1At;
        });
    _9Indices = Indices(_8Map);
    _10Zero = Zero();
    _11Aggregate = Aggregate(_9Indices, _10Zero, (Int32 x0, Int32 x1) => 
      {
        Single _0At;// 4:IndexOfLesserElement->4:At 117812
        Single _1At;// 4:IndexOfLesserElement->5:At 117813
        Boolean _2LessThanOrEqual;// 4:IndexOfLesserElement->2:LessThanOrEqual 117811
        _0At = At(_8Map, x0);
        _1At = At(_8Map, x1);
        _2LessThanOrEqual = LessThanOrEqual(_0At, _1At);
        if (_2LessThanOrEqual)
          {
            x0;
            }else
          {
            x1;
            };
        });
    _12Unit = Unit(_11Aggregate);
    _13Indices = Indices(_8Map);
    _14Zero = Zero();
    _15Aggregate = Aggregate(_13Indices, _14Zero, (Int32 x0, Int32 x1) => 
      {
        Single _0At;// 4:IndexOfGreaterElement->4:At 117823
        Single _1At;// 4:IndexOfGreaterElement->5:At 117824
        Boolean _2GreaterThanOrEqual;// 4:IndexOfGreaterElement->2:GreaterThanOrEqual 117822
        _0At = At(_8Map, x0);
        _1At = At(_8Map, x1);
        _2GreaterThanOrEqual = GreaterThanOrEqual(_0At, _1At);
        if (_2GreaterThanOrEqual)
          {
            x0;
            }else
          {
            x1;
            };
        });
    _16Append = Append(_12Unit, _15Aggregate);
    _17Map = Map(_16Append, (Int32 x0) => 
      {
        Single _0At;// 2:SelectByIndex->3:At 117797
        _0At = At(_8Map, x0);
        _0At;
        });
    _18Zero = Zero();
    _19At = At(_17Map, _18Zero);
    _20Constant = 2;
    _21Map = Map(_0ReadCSVData, (IArray[String] x0) => 
      {
        IArray[Single] _0Map;// 8:ParseStringArrayToFloat->4:Map 117762
        Int32 _1Zero;// 9:First->2:Zero 117759
        Single _2At;// 9:First->0:At 117758
        Single _3Multiply;// 16:Multiply 117756
        Single _4Subtract;// 18:Subtract 117755
        Single _5At;// 12:At 117770
        Single _6Multiply;// 13:Multiply 117769
        Single _7Subtract;// 24:Subtract 117768
        Single _17Multiply;// 26:Multiply 117774
        Single _18Subtract;// 25:Subtract 117773
        Single _19Subtract;// 27:Subtract 117767
        Single _20Constant;// 15:Vector3FromXY->0:Constant 117754
        Vector3 _21Vector3;// 15:Vector3FromXY->0:Vector3 117753
        _0Map = Map(x0, (String x0) => 
          {
            Single _0TryParseFloat;// 8:ParseStringArrayToFloat->2:TryParseFloat 117763
            _0TryParseFloat = TryParseFloat(x0, _1FloatZero);
            _0TryParseFloat;
            });
        _1Zero = Zero();
        _2At = At(_0Map, _1Zero);
        _3Multiply = Multiply(_2At, width);
        _4Subtract = Subtract(_3Multiply, width);
        _5At = At(_0Map, column);
        _6Multiply = Multiply(_5At, heightMultiply);
        _7Subtract = Subtract(_6Multiply, heightMultiply);
        _17Multiply = Multiply(heightMultiply, if (_5Equal)
            {
              Single _8IntAsFloat;// 54:IntAsFloat 117786
              IArray[Single] _9Map;// 52:ParseStringArrayToFloat->4:Map 117782
              Single _10At;// 50:At 117779
              _8IntAsFloat = IntAsFloat(_2Zero);
              _9Map = Map(_3At, (String x0) => 
                {
                  Single _0TryParseFloat;// 52:ParseStringArrayToFloat->2:TryParseFloat 117783
                  _0TryParseFloat = TryParseFloat(x0, _8IntAsFloat);
                  _0TryParseFloat;
                  });
              _10At = At(_9Map, column);
              _10At;
              }else
            {
              Boolean _11Equal;// 45:Equal 117788
              _11Equal = Equal(CenMinFir, _6Constant);
              if (_11Equal)
                {
                  _19At;
                  }else
                {
                  Int32 _12One;// 32:Second->2:One 117838
                  Single _13At;// 32:Second->0:At 117837
                  Single _14Subtract;// 34:Subtract 117835
                  Single _15Divide;// 36:Divide 117834
                  Single _16Add;// 38:Add 117833
                  _12One = One();
                  _13At = At(_17Map, _12One);
                  _14Subtract = Subtract(_13At, _19At);
                  _15Divide = Divide(_14Subtract, _20Constant);
                  _16Add = Add(_15Divide, _19At);
                  _16Add;
                  };
              });
        _18Subtract = Subtract(_17Multiply, heightMultiply);
        _19Subtract = Subtract(_7Subtract, _18Subtract);
        _20Constant = 0;
        _21Vector3 = Vector3(_4Subtract, _19Subtract, _20Constant);
        _21Vector3;
        });
    _22False = False();
    _23CreateSplineFromKnots = CreateSplineFromKnots(_21Map, _22False);
    _23CreateSplineFromKnots;
    }